#!/bin/bash
#
# stager      This shell script takes care of starting and stopping stager
#
# chkconfig: - 80 20
#
### BEGIN INIT INFO
# Provides: stager
# Default-Start:
# Default-Stop:
# Description: stager
# Short-Description: start and stop stager
### END INIT INFO
#

. /etc/profile

RVMENV=<%= node[:ruby][:rvmpath] %>/environments/default
STAGERBIN=<%= File.join(node[:cloudfoundry][:home], "stager", "bin", "stager") %>
STAGERUSER=<%= node[:deployment][:user] %>
STAGERCONFIG=<%= File.join(node[:deployment][:config_path]) %>/stager.yml
STAGERLOG=<%= node[:stager][:logpath] %>

pid_of_service() {
    ps auxwww | egrep "ruby.*stager" | grep -v grep | awk '{print $2}'
}

shutdown() {
	pid=`pid_of_service`
			
	if [ -n "$pid" ]; then
		kill -$1 $pid
		echo "We are going to sleep $2 secs to allow the health manager to move the apps to another server if necessary...."
		sleep $2
		LOOPCOUNT="0"
		MAXTRIES=30
		while [ "$pid" != "" ] ; do
        	sleep 5
       		echo "Checking PID $pid - $LOOPCOUNT/$MAXTRIES"
       		pid=`pid_of_service`
       		LOOPCOUNT=`expr $LOOPCOUNT + 1`
        	if [ "$LOOPCOUNT" -ge "$MAXTRIES" ] ; then
				FORCEKILL="yes"
				break
			fi
		done
		if [ "$FORCEKILL" == "yes" ] ; then
			echo "Force killing pid $pid"
			kill -9 "$pid"
		fi
	else
		echo "stager is not running"
	fi
	
}

# See how we were called.
case "$1" in
    start)
        if [ -f $STAGERBIN ] ; then
        	# stager runs as root
        	echo "Starting stager..."
        	nohup su - $STAGERUSER -c ". $RVMENV; $STAGERBIN -c $STAGERCONFIG"  >> $STAGERLOG 2>&1 &			 
		fi
        ;;
    stop)
    	if [ -f $STAGERBIN  ] ; then
			shutdown "USR2" 60;
		fi
        ;;
    stop-graceful)
		if [ -f $STAGERBIN  ] ; then
			shutdown "USR1" 0;
		fi
        ;;
    restart)
        $0 stop
        $0 start
        ;;
	graceful)
        $0 stop-graceful
        $0 start
        ;;		
    *)
        echo "Usage: $0 {start|stop|stop-graceful|restart|graceful}"
        exit 1
esac